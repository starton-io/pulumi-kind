// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kind:index/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * Client certificate for authenticating to cluster.
     */
    public /*out*/ readonly clientCertificate!: pulumi.Output<string>;
    /**
     * Client key for authenticating to cluster.
     */
    public /*out*/ readonly clientKey!: pulumi.Output<string>;
    /**
     * Client verifies the server certificate with this CA cert.
     */
    public /*out*/ readonly clusterCaCertificate!: pulumi.Output<string>;
    /**
     * Cluster successfully created.
     */
    public /*out*/ readonly completed!: pulumi.Output<boolean>;
    /**
     * Kubernetes APIServer endpoint.
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * The kindConfig that kind will use.
     */
    public readonly kindConfig!: pulumi.Output<outputs.ClusterKindConfig | undefined>;
    /**
     * The kubeconfig for the cluster after it is created
     */
    public /*out*/ readonly kubeconfig!: pulumi.Output<string>;
    /**
     * kubeconfig path set after the the cluster is created or by the user to override defaults.
     */
    public readonly kubeconfigPath!: pulumi.Output<string>;
    /**
     * The kind name that is given to the created cluster.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The nodeImage that kind will use (ex: kindest/node:v1.27.1).
     */
    public readonly nodeImage!: pulumi.Output<string>;
    /**
     * Defines wether or not the provider will wait for the control plane to be ready. Defaults to false.
     */
    public readonly waitForReady!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["clientCertificate"] = state ? state.clientCertificate : undefined;
            resourceInputs["clientKey"] = state ? state.clientKey : undefined;
            resourceInputs["clusterCaCertificate"] = state ? state.clusterCaCertificate : undefined;
            resourceInputs["completed"] = state ? state.completed : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["kindConfig"] = state ? state.kindConfig : undefined;
            resourceInputs["kubeconfig"] = state ? state.kubeconfig : undefined;
            resourceInputs["kubeconfigPath"] = state ? state.kubeconfigPath : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeImage"] = state ? state.nodeImage : undefined;
            resourceInputs["waitForReady"] = state ? state.waitForReady : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            resourceInputs["kindConfig"] = args ? args.kindConfig : undefined;
            resourceInputs["kubeconfigPath"] = args ? args.kubeconfigPath : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeImage"] = args ? args.nodeImage : undefined;
            resourceInputs["waitForReady"] = args ? args.waitForReady : undefined;
            resourceInputs["clientCertificate"] = undefined /*out*/;
            resourceInputs["clientKey"] = undefined /*out*/;
            resourceInputs["clusterCaCertificate"] = undefined /*out*/;
            resourceInputs["completed"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["kubeconfig"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["kubeconfig"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * Client certificate for authenticating to cluster.
     */
    clientCertificate?: pulumi.Input<string>;
    /**
     * Client key for authenticating to cluster.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * Client verifies the server certificate with this CA cert.
     */
    clusterCaCertificate?: pulumi.Input<string>;
    /**
     * Cluster successfully created.
     */
    completed?: pulumi.Input<boolean>;
    /**
     * Kubernetes APIServer endpoint.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * The kindConfig that kind will use.
     */
    kindConfig?: pulumi.Input<inputs.ClusterKindConfig>;
    /**
     * The kubeconfig for the cluster after it is created
     */
    kubeconfig?: pulumi.Input<string>;
    /**
     * kubeconfig path set after the the cluster is created or by the user to override defaults.
     */
    kubeconfigPath?: pulumi.Input<string>;
    /**
     * The kind name that is given to the created cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * The nodeImage that kind will use (ex: kindest/node:v1.27.1).
     */
    nodeImage?: pulumi.Input<string>;
    /**
     * Defines wether or not the provider will wait for the control plane to be ready. Defaults to false.
     */
    waitForReady?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * The kindConfig that kind will use.
     */
    kindConfig?: pulumi.Input<inputs.ClusterKindConfig>;
    /**
     * kubeconfig path set after the the cluster is created or by the user to override defaults.
     */
    kubeconfigPath?: pulumi.Input<string>;
    /**
     * The kind name that is given to the created cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * The nodeImage that kind will use (ex: kindest/node:v1.27.1).
     */
    nodeImage?: pulumi.Input<string>;
    /**
     * Defines wether or not the provider will wait for the control plane to be ready. Defaults to false.
     */
    waitForReady?: pulumi.Input<boolean>;
}
